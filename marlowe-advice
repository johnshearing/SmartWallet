

Use a fresh clone of https://github.com/input-output-hk/marlowe-starter-kit/tree/bwbush/CIP30 and sync'd Marlowe Runtime from scratch on preprod using the docker file there, https://github.com/input-output-hk/marlowe-starter-kit/blob/bwbush/CIP30/docker-compose.yaml. Wait for it to sync and then run the example. (Make sure that Nami is using preprod, too.)

Also, just now I slightly updated the documentation on the CIP30 branch, added npm install, and make the javascript a little more robust.

The Status Code: 406 Not Acceptable that you received probably indicated that the version of Marlowe Runtime was too old and didn't yet support the three new HTTP headers required for CIP30, see https://github.com/input-output-hk/marlowe-starter-kit/blob/bwbush/CIP30/06-cip30/ReadMe.md#marlowe-runtime-api.

If roles (instead of addresses) fit your use case, then these would provide abstraction that wouldn't tie the contract to specific addresses. Instead of updating or upgrading the contract to accommodate a new address, one would just have to move the role token from the old address to the new one. In fact, tokens like Ada Handles can be used as role tokens in Marlowe contracts. In this case the recovery and/or depositor addresses would be roles instead of explicit addresses.

could be updated by reference script
Actually, you'll need a custom Plutus script to effectively update the address. The release epoch can be updated using a Choice block that contains a TimeInvervalEnd value. You'll have to do a bit of time arithmetic in the contract.

 would be possible to update any of the fields
I imagine that we'll have some examples of using Plutus in conjunction with Marlowe, but it might be a while before support for stuff like that is built into the Marlowe Runtime backend.

Future versions of the Marlowe language might evolve to include updating of addresses etc. after the contract has been created. This is an open-source project, so what future versions of the language will support depends upon community involvement. Feel free to post feature requests:
GitHub issues for public feature requests: https://github.com/input-output-hk/marlowe-cardano/issues
Zendesk tickets for requests to IOG: https://iohk.zendesk.com/
Discussion of proposals for changes to the Marlowe language: https://github.com/input-output-hk/MIPs/discussions
Am I on the right track or do you imagine a different way to accomplish a smart contract wallet with recovery options?
It seems like you're headed in a good direction. I've found, personally, that starting with a small contract that is a just microcosm of the contract I eventually want to build helps me understand the issues involved and gives me new ideas for features and workarounds; sometimes a slight reframing of the use case can make the contract far easier to implement. I've learned a lot from experimenting with small Marlowe prototypes.
